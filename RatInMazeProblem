#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    bool isValid(int r,int c,int n,vector<vector<int>>&mat){
        if(r>=0 && r<n && c>=0 && c<n && mat[r][c]==1){
            return true;
        }
        else
        return false;
    }
    char dir(int r,int c){
        if(r==-1 && c==0){
            return 'U';
        }
        else if(r==0 && c==1){
            return 'R';
        }
        else if(r==1 && c==0){
            return 'D';
        }
        else{
            return 'L';
        }
    }
    void func(int r,int c,vector<vector<int>>&mat,vector<string>&ans,string res,int n){
        if(r==n-1 && c==n-1){
            ans.push_back(res);
            return;
        }
        int alpha[4]={-1,0,1,0};
        int beta[4]={0,1,0,-1};
        mat[r][c]=0;
        for(int i=0;i<4;i++){
            int nrow=r+alpha[i];
            int ncol=c+beta[i];
            if(isValid(nrow,ncol,n,mat)){
                res.push_back(dir(alpha[i],beta[i]));
                func(nrow,ncol,mat,ans,res,n);
                res.pop_back();
            }
        }
        mat[r][c]=1;
    }
    vector<string> findPath(vector<vector<int>> &mat) {
        // code here
        int n=mat.size();
        vector<string>ans;
        string res="";
        func(0,0,mat,ans,res, n);
        return ans;
    }
};
int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        string input;
        getline(cin, input);
        vector<vector<int>> mat;
        string innerArray;
        bool isInsideArray = false;

        for (char c : input) {
            if (c == '[') {
                if (isInsideArray) {
                    innerArray.clear();
                }
                isInsideArray = true;
            } else if (c == ']') {
                if (isInsideArray && !innerArray.empty()) {
                    vector<int> row;
                    stringstream ss(innerArray);
                    int num;

                    while (ss >> num) {
                        row.push_back(num);
                        if (ss.peek() == ',')
                            ss.ignore();
                        while (isspace(ss.peek()))
                            ss.ignore();
                    }

                    mat.push_back(row);
                    innerArray.clear();
                }
                isInsideArray = false;
            } else if (isInsideArray) {
                if (!isspace(c)) {
                    innerArray += c;
                }
            }
        }

        Solution obj;
        vector<string> result = obj.findPath(mat);
        sort(result.begin(), result.end());

        if (result.empty())
            cout << "[]";
        else
            for (int i = 0; i < result.size(); i++)
                cout << result[i] << " ";
        cout << endl;
        cout << "~" << endl;
    }
    return 0;
}